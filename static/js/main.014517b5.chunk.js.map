{"version":3,"sources":["components/episode-card/episode-card.component.jsx","components/episode-list/episode-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["EpisodeCard","props","className","episode","name","air_date","CardList","episodes","map","items","key","id","SearchBox","placeholder","handleChange","type","onChange","aria-label","App","e","setState","searchEpisode","target","value","state","page1","allEpisode","fetch","then","response","json","firstpage","results","secondpage","concat","this","filtedEpisode","filter","search","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wWAGaA,G,YAAc,SAACC,GAAD,OAEf,yBAAKC,UAAU,QACzB,yBAAKA,UAAU,eACf,4BAAKD,EAAME,QAAQC,OAEnB,yBAAKF,UAAU,aACb,gCAAYA,UAAU,mBAAkB,gCAC5C,6CAAmBD,EAAME,QAAQA,SADW,cAEhCF,EAAME,QAAQE,eCRbC,G,MAAW,SAACL,GAAD,OAEtB,yBAAKC,UAAU,OAERD,EAAMM,SAASC,KAAI,SAAAC,GAAK,OACxB,kBAAC,EAAD,CAAcC,IAAKD,EAAME,GAAIR,QAASM,UCPlCG,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,yBAAKZ,UAAU,wDACjB,yBAAKA,UAAU,SAAf,WACA,0BAAMA,UAAU,eACd,2BAAOA,UAAU,uBAAuBa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,EAAcG,aAAW,eCqDxGC,G,wDApDb,aAAc,IAAD,8BACZ,gBAoBDJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAACC,cAAeF,EAAEG,OAAOC,SAnBvC,EAAKC,MAAQ,CACXC,MAAM,GACNC,WAAW,GACXL,cAAc,IANL,E,gEAWO,IAAD,OACjBM,MAAM,kDACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAS,OAAE,EAAKX,SAAS,CAACK,MAAOM,EAAUC,aAChDJ,KAAKD,MAAM,kDACXC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAK,GAAU,OAAE,EAAKb,SAAS,CAACM,WAAW,EAAKF,MAAMC,MAAMS,OAAOD,EAAWD,iB,+BAQxE,IAAD,EAEgCG,KAAKX,MAAnCE,EAFF,EAEEA,WAAYL,EAFd,EAEcA,cACde,EAAgBV,EAAWW,QAAO,SAAAC,GAAM,OAAIA,EAAOlC,KAAKmC,cAAcC,SAASnB,EAAckB,kBAEnG,OAOE,yBAAKrC,UAAY,OAEf,kBAAC,EAAD,CACEW,YAAc,yBACdC,aAAgBqB,KAAKrB,eAEvB,yBAAKZ,UAAU,SAAf,kBACA,kBAAC,EAAD,CAAUK,SAAU6B,S,GA7CVK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.014517b5.chunk.js","sourcesContent":["import React from 'react';\nimport './episode-card.styles.css';\n\nexport const EpisodeCard = (props) => (\n    \n            <div className=\"card\">\n  <div className=\"card-header\">\n  <h3>{props.episode.name}</h3>\n  </div>\n  <div className=\"card-body\">\n    <blockquote className=\"blockquote mb-1\"><footer>\n<p>Episode Code : {props.episode.episode}</p>\nAir Date : {props.episode.air_date}</footer>\n  </blockquote>\n  </div>\n</div>\n           \n      \n    \n     \n            \n\n    \n\n)","import React from 'react';\nimport { EpisodeCard } from '../episode-card/episode-card.component'\nimport './episode-list.styles.css';\n\nexport const CardList = (props) => (\n\n  <div className=\"abc\">\n       {\n         props.episodes.map(items=>(\n         <EpisodeCard  key={items.id} episode={items}></EpisodeCard >\n         ))         \n       } \n    </div>\n \n \n)\n","import React from 'react';\nimport './search-box.styles.css'\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <nav className=\"navbar navbar-light bg-light justify-content-between\">\n  <div className='brand'>Surya G</div>\n  <form className=\"form-inline\">\n    <input className=\"form-control mr-sm-2\" type=\"search\" placeholder={placeholder} onChange={handleChange} aria-label=\"Search\"/>\n </form>\n</nav>\n\n\n)","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/episode-list/episode-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component{\n  constructor(){\n   super();\n\n    this.state = {\n      page1:[],\n      allEpisode:[],\n      searchEpisode:''\n    }\n\n  }\n\n  componentDidMount(){\n    fetch(`https://rickandmortyapi.com/api/episode?page=1`)\n    .then(response=> response.json())\n    .then(firstpage=>this.setState({page1: firstpage.results}))\n    .then(fetch(`https://rickandmortyapi.com/api/episode?page=2`)\n    .then(response=> response.json())\n    .then(secondpage=>this.setState({allEpisode:this.state.page1.concat(secondpage.results)}))\n    )\n  }\n\n  handleChange = (e) => {\n    this.setState({searchEpisode: e.target.value})\n  }\n\n  render(){\n\n    const { allEpisode, searchEpisode } = this.state;\n    const filtedEpisode = allEpisode.filter(search => search.name.toLowerCase().includes(searchEpisode.toLowerCase()))\n   \n    return(\n      //Note\n      //This web app is responsive too.\n      // Since I am new to React JS, I found this projct challenging. \n      // I tried to even display each episode thumbnails and list of leading character of each episode.But, it was only partially successful.So took it down.\n      // Thank You.\n    \n      <div className = 'App'>\n        \n        <SearchBox \n          placeholder = 'Search By Episode Name'\n          handleChange = {this.handleChange}\n        />\n        <div className=\"title\">Rick and Morty</div>\n        <CardList episodes={filtedEpisode}/>\n       \n      </div>\n    \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}